type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def get(self, x: int, y: int) -> FieldState:
            return self.field[y - 1][x - 1]

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        def is_winning(self, side: FieldState):
            if side == FieldState.FREE:
                return False

            for i in 1, 2, 3:
                if (self.get(i, 1) == side and
                    self.get(i, 2) == side and
                    self.get(i, 3) == side):
                    return True
                if (self.get(1, i) == side and
                    self.get(2, i) == side and
                    self.get(3, i) == side):
                    return True

            if (self.get(1, 1) == side and
                self.get(2, 2) == side and
                self.get(3, 3) == side):
                return True

            if (self.get(1, 3) == side and
                self.get(2, 2) == side and
                self.get(3, 1) == side):
                return True

        def is_draw(self):
            if self.is_winning(FieldState.X) or self.is_winning(FieldState.O):
                return False
            for i in 1, 2, 3:
                for j in 1, 2, 3:
                    if self.get(i, j) == FieldState.FREE:
                        return False
            return True

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                tests += [
                    TestCase(
                        stdin=full_game_input,
                        attach=(x, y)
                    )
                ]

                i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            lines = reply.splitlines()
            last_line = lines[-1]

            if not ('X wins' in last_line or 'O wins' in last_line or 'Draw' in last_line):
                return CheckResult.wrong(
                    "Can't parse final result, " +
                    "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'O wins' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"O wins\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'O wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"O wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            last_field: TicTacToeField = fields[-1]

            if last_field.is_winning(FieldState.X) and 'X wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that X wins, " +
                    "and your last line should contain \"X wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_winning(FieldState.O) and 'O wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that O wins, " +
                    "and your last line should contain \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_draw() and 'Draw' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that there is a draw, " +
                    "and your last line should contain \"Draw\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if (last_field.is_winning(FieldState.X) or
                last_field.is_winning(FieldState.O) or last_field.is_draw()):
                return CheckResult.correct()

            return CheckResult.wrong(
                "Your last field contains unfinished game, "
                "the game should be finished!"
            )


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tests.py
  visible: true
  text: |
    from tictactoe import TicTacToe
    from colorama import Fore
    from dataclasses import dataclass


    @dataclass
    class Movement:
        initial: str
        input: dict
        output: str


    def test_win_conditions():
        test_win_cases = {'XXXOO__O_': 'X wins', 'XOXOXOXXO': 'X wins', 'XOOOXOXXO': 'O wins',
                          'XOXOOXXXO': 'Draw', 'XO_OOX_X_': 'Game not finished', 'XO_XO_XOX': 'Impossible',
                          '_O_X__X_X': 'Impossible', '_OOOO_X_X': 'Impossible'}
        case_number = 1

        for case in test_win_cases:
            board = TicTacToe(case)
            evaluate_result = board.evaluate_wins()
            test_pass = Fore.RED + 'FAIL' + Fore.RESET
            if evaluate_result == test_win_cases[case]:
                test_pass = Fore.GREEN + 'PASS' + Fore.RESET
            print(f'Case {case_number}\n'
                  f'----------------\n'
                  f'{test_pass}\n'
                  f' - Expected result: {test_win_cases[case]}\n'
                  f' - Actual result: {evaluate_result}\n', )
            case_number += 1


    def test_board_movement():
        error_messages = {'occupied': 'This cell is occupied! Choose another one!',
                          'numbers': 'You should enter numbers!',
                          'coordinates': 'Coordinates should be from 1 to 3!'}
        test_movements_cases = [Movement('X_X_O____', {'1 1': ''}, 'X_X_O_X__'),  # 1
                                Movement('_XXOO_OX_', {'1 3': ''}, 'XXXOO_OX_'),  # 2
                                Movement('_XXOO_OX_', {'3 1': ''}, '_XXOO_OXX'),  # 3
                                Movement('_XXOO_OX_', {'3 2': ''}, '_XXOOXOX_'),  # 4
                                Movement('_XXOO_OX_', {'1 1': error_messages['occupied'], '1 3': ''}, 'XXXOO_OX_'),  # 5
                                Movement('_XXOO_OX_',
                                         {'one': error_messages['numbers'], 'one three': error_messages['numbers'],
                                          '1 3': ''}, 'XXXOO_OX_'),  # 6
                                Movement('_XXOO_OX_',
                                         {'4 1': error_messages['coordinates'], '1 4': error_messages['coordinates'],
                                          '1 3': ''}, 'XXXOO_OX_')]  # 7
        case_number = 1

        for case in test_movements_cases:
            test_pass = Fore.RED + 'FAIL' + Fore.RESET
            try:
                board = TicTacToe(case.initial)
                for movement in case.input:
                    moved, msg = board.move(movement)
                    assert msg == case.input[movement]
                assert case.output == repr(board)
                test_pass = Fore.GREEN + 'PASS' + Fore.RESET
            except AssertionError:
                # noinspection PyUnboundLocalVariable
                print(f'Case {case_number}\n'
                      f'----------------\n'
                      f'{test_pass}\n'
                      f' - Input: {movement}\n'
                      f' - Expected message: {repr(case.input[movement])}\n'
                      f' - Actual message: {repr(msg)}\n'
                      f' - Expected board: {case.output}\n'
                      f' - Actual board: {repr(board)}\n')
            else:
                test_pass = Fore.GREEN + 'PASS' + Fore.RESET
                print(f'Case {case_number}\n'
                      f'----------------\n'
                      f'{test_pass}\n'
                      f' - Expected board: {case.output}\n'
                      f' - Actual board: {repr(board)}\n')
            finally:
                case_number += 1


    if __name__ == '__main__':
        print('-----------------------')
        print('| ' + Fore.BLUE + 'Win Condition tests |' + Fore.RESET)
        print('-----------------------\n')
        test_win_conditions()
        print('\n')
        print('-------------------------')
        print('| ' + Fore.BLUE + 'Player movement tests |' + Fore.RESET)
        print('-------------------------\n')
        test_board_movement()

    # board = TicTacToe('XOXOXOXXO_')
    # board.print_board()
  learner_created: true
- name: tictactoe/scratch_pad.py
  visible: true
  text: |
    from tictactoe import TicTacToe
  learner_created: true
- name: tictactoe/tictactoe.py
  visible: true
  text: |-
    class TicTacToe:

        def __init__(self, initial_state):
            initial_state = list(initial_state)
            self.state = []
            self.cell_count = {'X': 0, 'O': 0, '_': 0}
            for row in range(0, 3):
                self.state.append([])
                for column in range(0,3):
                    self.state[row].append(initial_state.pop())
                    self.cell_count[self.state[row][column]] += 1
                self.state[row].reverse()
            self.state.reverse()
            # self.state = {'n' + str(key): value for key, value in enumerate(iterable=list(initial_state), start=1)}

        # def print_board(self):
        #     print('---------')
        #     for row in self.state:
        #         print(f'| {row[0]} {row[1]} {row[2]} |')
        #     print('---------')


        def evaluate_wins(self):
            x_wins = 0
            o_wins = 0
            nc = Exception('Case not covered')
            # Determine how many lines have a 3 in a row of a character
            for row in self.state:
                if row[0] == row[1] and row[1] == row[2]:
                    if row[0] == 'X':
                        x_wins += 1
                    else:
                        o_wins += 1
            for column in range(len(self.state[0])):
                if self.state[0][column] == self.state[1][column] and self.state[1][column] == self.state[2][column]:
                    if self.state[1][column] == 'X':
                        x_wins += 1
                    else:
                        o_wins += 1
            if self.state[0][0] == self.state[1][1] and self.state[1][1] == self.state[2][2]:
                if self.state[1][1] == 'X':
                    x_wins += 1
                else:
                    o_wins += 1
            if self.state[0][2] == self.state[1][1] and self.state[1][1] == self.state[2][0]:
                if self.state[1][1] == 'X':
                    x_wins += 1
                else:
                    o_wins += 1
            # A game is in an impossible state if a player has more than 1 extra move
            # or if the board has multiple 3 in a rows.
            if abs(self.cell_count['X'] - self.cell_count['O']) > 1:
                return 'Impossible'
            if x_wins + o_wins > 1:
                return 'Impossible'
            # If we are not in an impossible state, return the winner, if any
            if x_wins > o_wins:
                return 'X wins'
            elif o_wins > x_wins:
                return 'O wins'
            # And finally check if the game has not finished or if it is a draw based on empty spaced
            if self.cell_count['_'] > 0:
                return 'Game not finished'
            elif self.cell_count['_'] == 0:
                return 'Draw'
            # raise nc

        def move(self, square):
            try:
                column, row = map(int, square.split(' '))
                assert (1 <= row <= 3 and 1 <= column <= 3)
            except ValueError:
                return [False, 'You should enter numbers!']
            except AssertionError:
                return [False, 'Coordinates should be from 1 to 3!']
            row -= 1
            column -= 1
            # print('Current row: ' + str(row) + ' Current column: ' + str(column))
            row = 2 - row # Account for the weird input requirements for the exercise
            # print('Current row after math: ' + str(row))
            # print(f'{self.state[0]}\n{self.state[1]}\n{self.state[2]}')
            if self.state[row][column] != '_':
                return[False, 'This cell is occupied! Choose another one!']
            else:
                self.state[row][column] = 'X'
                self.cell_count['X'] += 1
                return [True, '']

        def __str__(self):
            board_str = '---------\n'
            for row in self.state:
                board_str += (f'| {row[0]} {row[1]} {row[2]} |\n')
            board_str += ('---------')
            return board_str

        def __repr__(self):
            board_repr = ''
            for row in self.state:
                board_repr += ''.join(row)
            return board_repr

    if __name__ == '__main__':
        board = TicTacToe(input())
        # board = TicTacToe('XXXOO__O_')
        print(board)
        moved = False
        while not moved:
            moved, msg = board.move(input('Enter the coordinates: '))
            if msg != '':
                print(msg)
        print(board)
  learner_created: true
feedback_link: https://hyperskill.org/projects/73/stages/403/implement
status: Failed
record: -1
